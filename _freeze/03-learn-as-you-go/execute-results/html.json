{
  "hash": "c6ed7e69c3f8b836c7bed61fb5585634",
  "result": {
    "markdown": "# Learn (As You Go) {#sec-learn_as_you_go}\n\n\n::: {.cell}\n\n:::\n\n\n## Find Functions\n\nHow would you discover functions for your specific needs?\n\n### Books\n\nThere are many great books on R that will expose you to functions. But, if you learn best by doing, the most effective technical book will be the one designed toward your specific task.\n\n### Large-Language-Models\n\nThe hottest new method is to simply ask LLM's.\n\n### Search Engines\n\nGoogle is a great search engine that most R programmers use when learning the R language. If we search \"r capitalize first letter\" we see, on 2025-03-06, the following paragraph as the first result:\n\n> Convert First letter of every word to Uppercase in R Programming – str_to_title() Function. str_to_title() Function in R Language is used to convert the first letter of every word of a string to Uppercase and the rest of the letters are converted to lower case.\n\nThe trick is to, within Google, always write `r` before a question or the desired command, like `how to capitalize first letter` or simply `capitalize first letter`.\n\nThis is a simple example. Most of the time it can be difficult to write in English what you want. This will come with time and practice. At first you may find that the Google search results have nothing to do with what you need. That is a sign to re-word your search, or, if you've already re-worded your search, it may be a sign that there is no dedicated function for what you need, or that a different approach is needed. It's rare that there will be no dedicated function so long as your goal is simple. You may find that it is effective to break down what you're doing into simple steps, and then search for how to do *those* steps, as opposed to Googling something long and complicated, involving many steps.\n\n### Stack Overflow\n\nSpeaking of breaking down something complicated so that a search engine like Google can understand it, this is also necessary for others to understand it. For learning R, allowing others to understand your challenge or need is valuable as the R community is not only willing, but also quickly able to help. R users mainly help each other through [Stack Overflow](stackoverflow.com). It is a website that easily allows users to ask or answer questions with code, have their code formatted (look nice), and receive feedback.\n\nThe main draw of Stack Overflow is that the person asking the question has one main responsibility, and that is to produce what is called a minimally reproducible example: an example that can be used (reproduced) by someone else seeing the question, and that does not have unnecessary detail irrelevant to the question (minimal).\n\nDescribe example\n\n[EXAMPLE HERE](https://stackoverflow.com/questions/58996293/transforming-a-dataframe-by-multiplying-a-columns-elements-by-the-names-of-th)\n\nKnowing how to make an example is the majority of the work involved in asking a question on Stack Overflow.\n\n#### Creating Minimally Reproducible Examples\n\nIf your question involves data frames, you need to learn how to build a data frame before asking your question on Stack Overflow. To build a data frame, you can use the `tibble()` function from package `tibble`.\n\nIf you have 2 numeric columns, like in\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n    year lifeExp\n   <dbl> <chr>  \n 1  1952 28.801 \n 2  1957 30.332 \n 3  1962 31.997 \n 4  1967 34.02  \n 5  1972 36.088 \n 6  1977 38.438 \n 7  1952 68.75  \n 8  1957 69.96  \n 9  1962 71.3   \n10  1967 72.13  \n11  1972 72.88  \n12  1977 74.21  \n```\n:::\n:::\n\n\nthen the first part of your minimal example might look this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = c(1, 2, 1, 2), y = c(3, 4, 2, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n      x     y\n  <dbl> <dbl>\n1     1     3\n2     2     4\n3     1     2\n4     2     2\n```\n:::\n:::\n\n\nAnd if what you're trying to achieve is\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n   year mean_lifeExp\n  <dbl>        <dbl>\n1  1952         48.8\n2  1957         50.1\n3  1962         51.6\n4  1967         53.1\n5  1972         54.5\n6  1977         56.3\n```\n:::\n:::\n\n\nthen the second part of your minimal example might look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = c(1, 2), mean_y = c(2.5, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n      x mean_y\n  <dbl>  <dbl>\n1     1    2.5\n2     2    2  \n```\n:::\n:::\n\n\nTo summarize, your entire question on Stack Overflow could look like this:\n\n```         \nHow can I transform the first tibble into the second tibble with a function?\nlibrary(tibble)\ntibble(x = c(1, 2, 1, 2), y = c(3, 4, 2, 2))\ntibble(x = c(1, 2), mean_y = c(2.5, 2))\n```\n\nTo make your question even better, you can format your code by using the `reprex` function from the reprex package. The curly brackets are needed to tell reprex that you have multiple lines of code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reprex)\nreprex(\n  {\n    library(tibble)\n    tibble(x = c(1, 2, 1, 2), y = c(3, 4, 2, 2))\n    tibble(x = c(1, 2), mean_y = c(2.5, 2))\n  }\n)\n```\n:::\n\n\nFinally your question looks friendly:\n\n```         \nHow can I transform the first tibble into the second tibble with a function?\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\ntibble(x = c(1, 2, 1, 2), y = c(3, 4, 2, 2))\n#> # A tibble: 4 × 2\n#>       x     y\n#>   <dbl> <dbl>\n#> 1     1     3\n#> 2     2     4\n#> 3     1     2\n#> 4     2     2\ntibble(x = c(1, 2), mean_y = c(2.5, 2))\n#> # A tibble: 2 × 2\n#>       x mean_y\n#>   <dbl>  <dbl>\n#> 1     1    2.5\n#> 2     2    2\n```\n:::\n\n\n## Understand Functions\n\nOnce you've found a function (or usually, a set of functions) recommended to you, it would be wise to understand how the function(s) work; specifically, the inputs and outputs.\n\n### Large-Language-Models\n\nLLM's can explain function inputs and outputs as they are trained on public online knowledge.\n\n### Search Engines\n\nSearch engines will give a variety of websites. Remember, after googling \"r capitalize first letter\" we saw the following paragraph as the first result:\n\n> Convert First letter of every word to Uppercase in R Programming – str_to_title() Function. str_to_title() Function in R Language is used to convert the first letter of every word of a string to Uppercase and the rest of the letters are converted to lower case.\n\nThis paragraph is from a website called [GeeksforGeeks](https://www.geeksforgeeks.org/convert-first-letter-of-every-word-to-uppercase-in-r-programming-str_to_title-function). I would not recommend using this website to understand the function. And for multiple reasons.\n\n1.  You are not familiar with the format of the website.\n2.  You will find yourself on multiple websites when you need to discover and learn about multiple functions.\n3.  You will then have to navigate the formats of these websites.\n4.  Many things can get in the way of reading the instructions, like pop-ups to sign up for the website's email list, advertisements for completely unrelated products (everything you need to learn R is FREE), and recommended articles to distract you.\n\nIt is more effective to use a single, standardized resource when learning about functions. Thankfully, R has a few.\n\nAfter reading the above paragraph and learning that the function we need may be `str_to_title()`, we can now Google search \"r str_to_title\" instead of \"r capitalize first letter\". Again, Google shows multiple websites, but we are looking for one that is standardized. [tidyverse.org](tidyverse.org) is one of those websites, so we click the result that has \"tidyverse.org\" in the website address This brings us to this page: <https://stringr.tidyverse.org/reference/case.html>\n\nAs standard, there are multiple sections to the webpage describing a function: *Usage*, *Arguments* and *Examples.* *Usage* shows the format of the inputs to the function. Any input with an `=` beside it has a default value. A default value usually indicates that most users will not need to change the value.\n\nThe *Usage* `str_to_title(string, locale = \"en\")` tells us that\n\n1.  `string` should be an object containing some string(s) or a string itself. It has no default value; we must provide one.\n2.  `locale` has the default value `\"en\"`.\n\nThe *Arguments* tell us more about the inputs in case the *Usage* is not enough. When first learning R, *Arguments* can be overwhelming; you might quickly find yourself not understanding the words contained therein, and having to continuously look up definitions (or more function documentation) in order to understand.\n\n### Stack Overflow\n\nAnother way to understand functions is to be presented with answers from others on Stack Overflow. These answers don't need to be answers to the questions you have posted on Stack Overflow; they can be answers to questions posted by others.\n\nFor example, here is a question dated from 2019: https://stackoverflow.com/questions/58996293/transforming-a-dataframe-by-multiplying-a-columns-elements-by-the-names-of-th\n\nThere are three separate answers that have up votes (positive feedback represented by the digit on the top left of an answer): 1 using the `data.table` package; 1 using `base R` (R without packages); and 1 using `tidyr`.\n\nNotice how the answer using `tidyr` is far more simple; it is one line of code. This word `tidy` keeps popping up, and for good reason: the functions in this package and more broadly in the `tidyverse` (the tidy universe) are designed to make coding short and simple.\n\nIt is possible to add comments to the answers on Stack Overflow, with further questions about the functions if there is something you don't understand. Fortunately the `tidyverse` functions are well documented because of their standardized webpages, and because of multiple, free books on using them for specific tasks.\n\n<!-- Even by looking around the tidyverse.org website, we can easily find more  functions. [https://www.tidyverse.org/packages/](https://www.tidyverse.org/packages/) describes the most useful packages. Reading the descriptions tell us the purpose of the packages. It is not important to know the names of these packages, but it is useful to understand what they each provide.  -->\n\n<!-- ```{r} -->\n\n<!-- df |> pull(year) |> unique -->\n\n<!-- df$lifeExp[1] <- \"blah\" -->\n\n<!-- df |> mutate(lifeExp = as.numeric(lifeExp)) -->\n\n<!-- # if the string contains letters, then as.numeric will turn these strings into missing values or in other words NAs -->\n\n<!-- df |> filter(is.na(as.numeric(lifeExp))) -->\n\n<!-- ``` -->\n\n<!-- This code now looks a lot more complicated due to what are called special characters. Both [ and \\\\ are special characters: characters that mean something to your computer program more than the literal symbol itself. The square brackets surround the characters that str_split will use as separators. The \\\\\\\\ avoids the . from being treated as a special character; we want the literal . to be used as separator by str_split. (There are two \\\\ because a \\\\ is also a special character, and we want R to run \\\\.). -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}